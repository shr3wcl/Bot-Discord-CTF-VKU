import { Players } from './../interface/model.interface';
import { CacheType } from 'discord.js';
import { ChatInputCommandInteraction } from 'discord.js';
import { User } from 'discord.js';
import playerModel from '../model/player.model';
import { createEmbed } from '../feature/component';
import teamModel from '../model/team.model';


const setLevelHacker = (point: Number) => {
    const value = point.valueOf() || 0;
    if (0 <= value && value <= 500) {
        return "ü•∏ Newbie";
    } else if (500 < value && value <= 1000) {
        return "‚≠ê Script Kiddle";
    } else if (1000 < value && value <= 1500) {
        return "üè¥‚Äç‚ò†Ô∏è Hacker";
    } else if (1500 < value && value <= 2500) {
        return "ü•∑ Binary warrior";
    } else if (2500 < value && value <= 3500) {
        return "üö© Redteam";
    } else if (3500 < value && value < 5000) {
        return "‚öîÔ∏è Legendary";
    } else if (5000 <= value && value < 10000) {
        return "üéñÔ∏è Guru"
    } else if (10000 <= value && value < 20000) {
        return "üèÜ Omniscient";
    } else if (20000 <= value && value < 50000) {
        return "üëë God";
    } else if (50000 <= value) {
        return "üë∏ Root King";
    }
}

export const getInfoHacker = async (player: User, interaction: ChatInputCommandInteraction<CacheType>) => {
    try {
        const user = await playerModel.findOne({ idUser: player.id });

        if (!user) {
            await interaction.reply("Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ trong h·ªá th·ªëng! Submit √≠t nh·∫•t m·ªôt Flag ƒë·ªÉ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng");
            return;
        }

        const { nameUser, level, numberFlags, point, idTeam } = user;
        const nickname = player.globalName ?? "Kh√¥ng r√µ";

        let teamInfo = "Ch∆∞a c√≥ team";
        if (idTeam && idTeam.length > 0) {
            const teams = await teamModel.find({ idTeam: { $in: idTeam } });
            if (teams.length > 0) {
                teamInfo = teams.map(team => `${team.name} - ${team.idTeam}`).join("\n\t\t");
            }
        }

        const infoHacker = `***Bi·ªát danh***: ${nickname}` +
            `***\nC·∫•p ƒë·ªô***: ${level}` +
            `***\nS·ªë flag ƒë√£ submit***: ${numberFlags}` +
            `***\nƒêi·ªÉm s·ªë***: ${point}`
            + `***\nTeam***: ${teamInfo}`;

        const embed = createEmbed(`Th√¥ng tin c·ªßa hacker: "***${nickname}***"`, infoHacker);
        await interaction.reply({ embeds: [embed] });
    } catch (error) {
        console.error(error);
        await interaction.reply("C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin c·ªßa hacker.");
    }
}


export const updateLevelAllUser = async (admin: Boolean, interaction: ChatInputCommandInteraction<CacheType>) => {
    if (admin) {
        try {
            const hackers = await playerModel.find();
            const updateOperations = hackers.map(async (hacker: Players) => {
                hacker.level = setLevelHacker(hacker.point);
                await hacker.save();
            });
            await Promise.all(updateOperations);
            await interaction.reply("C·∫•p ƒë·ªô c·ªßa t·∫•t c·∫£ Hacker ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t");
        } catch (error) {
            console.error(error);
            await interaction.reply("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t c·∫•p ƒë·ªô c·ªßa t·∫•t c·∫£ Hacker.");
        }
    } else {
        await interaction.reply("B·∫°n kh√¥ng ph·∫£i l√† Admin ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y!");
    }
}


export const joinTeam = async (hacker: User, idTeam: String | null, interaction: ChatInputCommandInteraction<CacheType>) => {
    const user = await playerModel.findOne({ idUser: hacker.id });
    if (!user) {
        await interaction.reply("Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ trong h·ªá th·ªëng! H√£y submit √≠t nh·∫•t m·ªôt Flag ƒë·ªÉ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng");
    } else {
        const team = await teamModel.findOne({ idTeam: idTeam });

        if (!team) {
            await interaction.reply("Nh√≥m kh√¥ng t·ªìn t·∫°i!");
            return;
        }

        if (team.members.find((member: any) => member.idUser === user.idUser)) {
            await interaction.reply("B·∫°n ƒë√£ c√≥ trong nh√≥m n√†y!");
            return;
        }

        if (!user.idTeam) {
            user.idTeam = [];
        }

        team.idTeam ? user.idTeam.push(team.idTeam) : null;
        team.members.push(user);

        try {
            await Promise.all([team.save(), user.save()]);
            await interaction.reply("ƒê√£ tham gia nh√≥m th√†nh c√¥ng!");
        } catch (error) {
            console.error(error);
            await interaction.reply("C√≥ l·ªói x·∫£y ra khi tham gia nh√≥m.");
        }
    }
}


export const createTeam = async (hacker: User, nameTeam: String, description: String, interaction: ChatInputCommandInteraction<CacheType>) => {
    try {
        const user = await playerModel.findOne({ idUser: hacker.id });
        if (!user) {
            await interaction.reply("Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ trong h·ªá th·ªëng! H√£y submit √≠t nh·∫•t m·ªôt Flag ƒë·ªÉ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng");
            return;
        }

        const existingTeam = await teamModel.findOne({ name: nameTeam });
        if (existingTeam) {
            await interaction.reply("T√™n team ƒë√£ t·ªìn t·∫°i!");
            return;
        }

        const idTeam = Math.random().toString(36).substring(2, 14);
        const newTeam = new teamModel({
            idTeam: idTeam,
            name: nameTeam,
            description: description,
            score: 0,
            contests: [],
            members: [user]
        });

        await Promise.all([newTeam.save(), user.updateOne({ $push: { idTeam: idTeam } })]);
        await interaction.reply("T·∫°o team th√†nh c√¥ng!");
    } catch (error) {
        console.error(error);
        await interaction.reply("C√≥ l·ªói x·∫£y ra! Kh√¥ng th·ªÉ t·∫°o team b√¢y gi·ªù.");
    }
}


export const leaveTeam = async (hacker: User, idTeam: String | null, interaction: ChatInputCommandInteraction<CacheType>) => {
    const user = await playerModel.findOne({ idUser: hacker.id });
    if (!user) {
        await interaction.reply("Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ trong h·ªá th·ªëng! H√£y submit √≠t nh·∫•t m·ªôt Flag ƒë·ªÉ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng");
        return;
    }

    const checkTeam = await teamModel.findOne({ idTeam: idTeam });
    if (!checkTeam) {
        await interaction.reply("Team kh√¥ng t·ªìn t·∫°i!");
        return;
    }

    if (!user.idTeam || !user.idTeam.includes(idTeam ?? "")) {
        await interaction.reply("B·∫°n kh√¥ng c√≥ trong team n√†y!");
        return;
    }

    const index = checkTeam.members.findIndex((member: any) => member.idUser === user.idUser);
    if (index !== -1) {
        checkTeam.members.splice(index, 1);
        await Promise.all([checkTeam.save(), user.updateOne({ $pull: { idTeam: idTeam } })]);
        await interaction.reply("R·ªùi team th√†nh c√¥ng!");
    } else {
        await interaction.reply("B·∫°n kh√¥ng c√≥ trong team n√†y!");
    }
}


export const listParticipatedContest = async (hacker: User, interaction: ChatInputCommandInteraction<CacheType>) => {
    const user = await playerModel.findOne({ idUser: hacker.id });
    if (user) {
        const listContest = await teamModel.find({ "members.idUser": user.idUser }, "name idTeam contests");
        if (listContest.length > 0) {
            const listContestName = listContest.map((contest: any) => {
                return contest.name + " - " + contest.idTeam;
            });
            const embed = createEmbed("Danh s√°ch contest ƒë√£ v√† ƒëang tham gia", listContestName.join("\n\t\t"));
            await interaction.reply({ embeds: [embed] });
        } else {
            await interaction.reply("B·∫°n ch∆∞a tham gia contest n√†o!");
        }
    } else {
        await interaction.reply("Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ trong h·ªá th·ªëng! Submit √≠t nh·∫•t m·ªôt Flag ƒë·ªÉ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng");
    }
}
